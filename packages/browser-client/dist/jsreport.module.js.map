{"version":3,"file":"jsreport.module.js","sources":["../src/jsreport.js"],"sourcesContent":["/* globals jsreportInit */\nimport { saveAs } from 'file-saver'\n\nclass RenderResponse {\n  constructor (res) {\n    this._response = res\n  }\n\n  /**\n   * Return the fetch original response\n   */\n  get response () {\n    return this._response\n  }\n\n  /**\n   * Returns Promise<string> content of the response\n   * @returns {Promise<string>}\n   */\n  async toString () {\n    const blob = await this.response.blob()\n    return blob.text()\n  }\n\n  /**\n   * Invoke save of the output content as the file\n   * @param {string} afilename  - filename to save the file as\n   */\n  async download (afilename) {\n    const blob = await this.response.blob()\n    saveAs(blob, afilename)\n  }\n\n  /**\n   * Returns Promise<Blob> content of the response\n   * @returns {Promise<Blob>}\n   */\n  async toBlob () {\n    return this.response.blob()\n  }\n\n  /**\n   *  Return Promise<string> data URI of the response\n   * @returns {Promise<string>}\n   */\n  async toDataURI () {\n    const reader = new FileReader()\n    const blob = await this.response.blob()\n    return new Promise((resolve) => {\n      reader.onload = function (e) {\n        resolve(reader.result)\n      }\n      reader.readAsDataURL(blob)\n    })\n  }\n\n  /**\n   * Opens the response content in a new browser window\n   * @param {Object} options - optional configs passed to the window.open\n   * @param {string} options.windowName - name of the window\n   * @param {string} options.windowFeatures - features of the window\n   * @param {Number} options.cleanInterval - how often to check if the window is closed to clean up the object URL\n   * @param {Number} options.title - tab title name\n   * @returns {Promise<Window}\n   */\n  async openInWindow ({\n    cleanInterval = 5000,\n    windowName,\n    windowFeatures,\n    title\n  } = { }) {\n    const blob = await this.response.blob()\n    const objectURL = URL.createObjectURL(blob, windowName, windowFeatures)\n\n    const previewURL = window.URL.createObjectURL(new Blob([`\n    <html>\n      <head>\n        <title>${title || 'report'}</title>\n        <style>\n          html, body {\n            margin: 0px;\n            width: 100%;\n            height: 100%;\n          }\n        </style>\n      </head>\n      <body>\n        <iframe src=\"${objectURL}\" frameborder=\"0\" width=\"100%\" height=\"100%\" />\n      </body>\n    </html>\n  `], { type: 'text/html' }))\n\n    const w = window.open(previewURL)\n    const interval = setInterval(() => {\n      if (w && w.closed) {\n        URL.revokeObjectURL(objectURL)\n        URL.revokeObjectURL(previewURL)\n        clearInterval(interval)\n      }\n    }, cleanInterval)\n    return w\n  }\n\n  /**\n   * Return the response as object URL. Remember you need to revoke the object URL when you are done with it\n   * @returns {Promise<string>}\n   */\n  async toObjectURL () {\n    const blob = await this.response.blob()\n    return URL.createObjectURL(blob)\n  }\n}\n\nclass JsReportClient {\n  constructor () {\n    this.headers = {}\n  }\n\n  _normalizeUrl (baseUrl, ...paths) {\n    const rootUrl = new URL(baseUrl)\n    const normalizedPaths = []\n\n    for (const path of paths) {\n      let normalizedPath = path\n\n      if (normalizedPath[0] === '/') {\n        normalizedPath = normalizedPath.slice(1)\n      }\n\n      if (normalizedPath[normalizedPath.length - 1] === '/') {\n        normalizedPath = normalizedPath.slice(0, -1)\n      }\n\n      if (normalizedPath !== '') {\n        normalizedPaths.push(normalizedPath)\n      }\n    }\n\n    if (normalizedPaths.length === 0) {\n      return rootUrl.toString()\n    }\n\n    return new URL(normalizedPaths.join('/'), rootUrl).toString()\n  }\n\n  async _jsreportRequest ({ method, path, body }) {\n    if (!this.serverUrl) {\n      throw new Error('The script was not linked from jsreport. You need to fill jsreport.serverUrl property with valid url to jsreport server.')\n    }\n\n    const reportUrl = this._normalizeUrl(this.serverUrl, path)\n\n    let res\n    try {\n      res = await fetch(reportUrl, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.headers\n        },\n        body: body != null ? JSON.stringify(body) : null,\n        method\n      })\n    } catch (e) {\n      throw new Error('Failed to connect to jsreport server.')\n    }\n\n    if (!res.ok) {\n      let error = {\n        message: `jsreport server responded with error. status text: ${res.statusText}, status code: ${res.status}`\n      }\n      try {\n        const blob = await res.blob()\n        const text = await blob.text()\n        const remoteError = JSON.parse(text)\n        error = {\n          ...remoteError,\n          message: `${error.message}, details: ${remoteError.message}`\n        }\n      } catch (e) {\n\n      }\n      const returnError = new Error(error.message)\n      Object.assign(returnError, {\n        status: res.status,\n        statusText: res.statusText,\n        error\n      })\n      throw returnError\n    }\n\n    return res\n  }\n\n  _submitFormRequest (req, target, title) {\n    const mapForm = document.createElement('form')\n    mapForm.target = target\n    mapForm.id = new Date().getTime()\n    mapForm.method = 'POST'\n    mapForm.action = this._normalizeUrl(this.serverUrl, '/api/report', encodeURIComponent(title))\n\n    const input = document.createElement('input')\n    input.type = 'hidden'\n    input.name = 'renderRequestContent'\n    input.value = JSON.stringify(req)\n    mapForm.appendChild(input)\n    document.body.appendChild(mapForm)\n\n    function submit (i) {\n      if (i > 10) {\n        return console.log('Unable to submit render form.')\n      }\n      try {\n        mapForm.submit()\n        mapForm.outerHTML = ''\n      } catch (e) {\n        setTimeout(function () {\n          submit(i + 1)\n        }, 50)\n      }\n    }\n\n    submit(0)\n  }\n\n  /**\n   * Render report in remote server and initiate download\n   * This method doesn't support submitting to jsreport with authentication enabled\n   * @param {filename} new tab title\n   * @param {RenderRequest} renderRequest\n   */\n  download (filename, req) {\n    if (\n      filename == null ||\n      typeof filename !== 'string' ||\n      filename.trim() === ''\n    ) {\n      throw new Error('jsreport.download requires filename parameter and must be a non empty string')\n    }\n\n    const request = Object.assign({}, req)\n    request.options = Object.assign({}, request.options)\n    if (request.options['Content-Disposition'] == null) {\n      request.options['Content-Disposition'] = `attachment; filename=\"${filename}\"`\n    }\n    this._submitFormRequest(request, '_self', filename)\n  }\n\n  /**\n   * Render report in remote server and open in new tab\n   * This method doesn't support submitting to jsreport with authentication enabled\n   * @param {Object} options\n   * @param {string} options.filename\n   * @param {string} options.title\n   * @param {RenderRequest} renderRequest\n   */\n  openInWindow ({ title, filename } = {}, req) {\n    if (\n      title == null ||\n      typeof title !== 'string' ||\n      title.trim() === ''\n    ) {\n      throw new Error('jsreport.openInWindow requires title parameter and must be a non empty string')\n    }\n\n    if (\n      filename == null ||\n      typeof filename !== 'string' ||\n      filename.trim() === ''\n    ) {\n      throw new Error('jsreport.openInWindow requires filename parameter and must be a non empty string')\n    }\n\n    const request = Object.assign({}, req)\n    if (filename) {\n      request.options = Object.assign({}, request.options)\n      if (request.options['Content-Disposition'] == null) {\n        request.options['Content-Disposition'] = `inline; filename=\"${filename}\"`\n      }\n    }\n\n    this._submitFormRequest(request, '_blank', title)\n  }\n\n  /**\n   * Render report in remote server\n   * @param {RenderRequest} renderRequest\n   * @returns {Promise<RenderResponse>}\n   */\n  async render (renderRequest) {\n    const res = await this._jsreportRequest({ method: 'POST', path: '/api/report', body: renderRequest })\n    return new RenderResponse(res)\n  }\n\n  /**\n   * Create new instance of the client, this is rarely needed and you can use the default in the most of the cases\n   * @returns {JsReportClient}\n   */\n  createClient () {\n    return new JsReportClient()\n  }\n}\n\nconst jsreportInstance = new JsReportClient()\nsetTimeout(function () {\n  if (window.jsreportInit !== undefined) {\n    jsreportInit(jsreportInstance)\n  }\n}, 0)\n\nexport default jsreportInstance\n"],"names":["_catch","body","recover","result","e","then","RenderResponse","res","this","_response","toString","response","blob","text","download","afilename","saveAs","toBlob","toDataURI","reader","FileReader","Promise","resolve","onload","readAsDataURL","openInWindow","cleanInterval","windowName","windowFeatures","title","objectURL","URL","createObjectURL","previewURL","window","Blob","type","w","open","interval","setInterval","closed","revokeObjectURL","clearInterval","toObjectURL","jsreportInstance","headers","_normalizeUrl","baseUrl","rootUrl","normalizedPaths","path","normalizedPath","slice","length","push","join","_jsreportRequest","method","ok","returnError","Error","error","message","Object","assign","status","statusText","remoteError","JSON","parse","_this14","serverUrl","reportUrl","fetch","stringify","_submitFormRequest","req","target","mapForm","document","createElement","id","Date","getTime","action","encodeURIComponent","input","name","value","appendChild","submit","i","console","log","outerHTML","setTimeout","filename","trim","request","options","render","renderRequest","createClient","JsReportClient","undefined","jsreportInit"],"mappings":"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"}